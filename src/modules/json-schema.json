{
  "$schema": "http://json-schema.org/draft-04/schema",
  "title": "JSON Schema for extensions modules",
  "type": "object",
  "definitions": {
    "assembly": {
      "type": "object",
      "required": [ "priority" ],
      "properties": {
        "priority": { "type": "number" },
        "options": { "type": "object" }
      }
    },
    "dbConnection": {
      "type": "object",
      "properties": {
        "connections": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [ "connectionString" ],
            "properties": {
              "name": {
                "type": "string",
                "default": "default"
              },
              "connectionString": { "type": "string" },
              "database": { "type": "string" }
            }
          }
        },
        "serviceLifetime": {
          "enum": [ "Singleton", "Scoped", "Transient" ],
          "default": "Scoped"
        }
      }
    },
    "endpoint": {
      "type": "object",
      "required": [ "address" ],
      "properties": {
        "address": { "type": "string" },
        "port": { "type": "integer" },
        "username": { "type": "string" },
        "password": { "type": "string" },
        "enableSsl": { "type": "boolean" },
        "skipCertificateValidation": { "type": "boolean" }
      }
    },
    "entryExpirationInMinutes": {
      "type": "object",
      "properties": {
        "fast": {
          "type": "integer",
          "default": 10
        },
        "medium": {
          "type": "integer",
          "default": 60
        },
        "slow": {
          "type": "integer",
          "default": 240
        },
        "never": {
          "type": "integer",
          "default": 1440
        }
      }
    },
    "identityResource": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "default": true
        },
        "name": {
          "type": "string",
          "description": "The unique name of the resource"
        },
        "displayName": {
          "type": "string",
          "description": "Display name of the resource"
        },
        "userClaims": {
          "type": "array",
          "items": {
            "type": "string",
            "uniqueItems": true
          },
          "description": "List of accociated user claims that should be included when this resource is requested"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Sets the custom properties for the resource"
        }
      }
    },
    "identitySecret": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "value": { "type": "string" },
        "expiration": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [ "SharedSecret", "X509Thumbprint", "X509Name", "X509CertificateBase64" ],
          "default": "SharedSecret"
        }
      }
    }
  },
  "required": [ "extConfig" ],
  "properties": {
    "extConfig": {
      "type": "object",
      "properties": {
        "folder": {
          "type": "string"
        },
        "enableShutDownOnChange": {
          "type": "boolean"
        },
        "assemblies": {
          "type": "object",
          "properties": {
            "app.core.Extensions.Api": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "serialization": {
                      "type": "object",
                      "properties": {
                        "nullValueHandling": {
                          "enum": [ "Ignore", "Include" ],
                          "default": "Ignore"
                        },
                        "formatting": {
                          "enum": [ "None", "Indented" ],
                          "default": "None"
                        },
                        "referenceLoopHandling": {
                          "enum": [ "Error", "Ignore", "Serialize" ],
                          "default": "Error"
                        },
                        "dateParseHandling": {
                          "enum": [ "None", "DateTime", "DateTimeOffset" ],
                          "default": "DateTime"
                        },
                        "dateTimeZoneHandling": {
                          "enum": [ "Local", "Utc", "Unspecified", "RoundtripKind" ],
                          "default": "RoundtripKind"
                        }
                      }
                    },
                    "session": {
                      "type": "object",
                      "properties": {
                        "idleTimeoutInMinutes": {
                          "default": 20,
                          "description": "The IdleTimeout indicates how long the session can be idle before its contents are abandoned. Each session access resets the timeout. Note this only applies to the content of the session, not the cookie.",
                          "type": "integer"
                        },
                        "cookie": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the cookie."
                            },
                            "path": {
                              "type": "string",
                              "description": "The cookie path."
                            },
                            "domain": {
                              "type": "string",
                              "description": "The domain to associate the cookie with."
                            },
                            "httpOnly": {
                              "type": "boolean",
                              "description": "Indicates whether a cookie is accessible by client-side script.",
                              "default": true
                            }
                          }
                        }
                      }
                    },
                    "documentation": {
                      "type": "object",
                      "required": [ "endpoints" ],
                      "properties": {
                        "routePrefix": {
                          "type": "string",
                          "default": "swagger"
                        },
                        "endpoints": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "default": "v{index}"
                              },
                              "title": {
                                "type": "string",
                                "default": "API v{index}"
                              },
                              "version": {
                                "type": "string",
                                "default": "{id}"
                              }
                            }
                          }
                        },
                        "xmlComments": {
                          "type": "object",
                          "description": "To include Xml Comments, open the Properties dialog for your project, click the \"Build\" tab and ensure that \"XML documentation file\" is checked.\n This will produce a file containing all XML comments at build-time.\nAt this point, any classes or methods that are NOT annotated with XML comments will trigger a build warning.\n To suppress this, enter the warning code 1591 into the \"Suppress warnings\" field in the properties dialog.",
                          "required": [ "fileName" ],
                          "properties": {
                            "fileName": {
                              "type": "string",
                              "description": "i.e. api.xml\nCheck PropertyGroup>DocumentationFile value in your .csproj file."
                            },
                            "includeControllerComments": {
                              "type": "boolean",
                              "default": false
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "app.core.Extensions.Cors": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "polices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": { "type": "string" },
                          "origins": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "To allow one or more specific origins"
                          },
                          "methods": {
                            "type": "array",
                            "items": {
                              "enum": [ "GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS", "TRACE" ]
                            },
                            "uniqueItems": true
                          },
                          "headers": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "To whitelist specific headers"
                          },
                          "exposedHeaders": {
                            "type": "array",
                            "items": { "type": "string" },
                            "description": "The CORS spec calls simple response headers. Specify other headers available to the application"
                          },
                          "allowCredentials": {
                            "type": "boolean",
                            "description": " Credentials include cookies as well as HTTP authentication schemes"
                          },
                          "preflightMaxAgeInSeconds": {
                            "type": "integer",
                            "description": "Value in seconds. The Access-Control-Max-Age header specifies how long the response to the preflight request can be cached"
                          }
                        },
                        "required": [ "name" ]
                      }
                    }
                  }
                }
              }
            },
            "app.core.Extensions.Data": { "$ref": "#/definitions/assembly" },
            "app.core.Extensions.Data.Cache": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "type": { "enum": [ "Memory", "Distributed", "Redis", "SqlServer" ] },
                    "redisOptions": {
                      "type": "object",
                      "properties": {
                        "configuration": { "type": "string" },
                        "instanceName": {
                          "type": "string",
                          "default": "master"
                        }
                      }
                    },
                    "sqlOptions": {
                      "type": "object",
                      "properties": {
                        "connectionString": { "type": "string" },
                        "schemaName": {
                          "type": "string",
                          "default": "dbo"
                        },
                        "tableName": {
                          "type": "string",
                          "default": "Entry"
                        }
                      }
                    },
                    "entryExpirationInMinutes": { "$ref": "#/definitions/entryExpirationInMinutes" }
                  }
                }
              }
            },
            "app.core.Extensions.Data.Cache.Memcached": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "client": {
                      "type": "object",
                      "properties": {
                        "servers": {
                          "type": "array",
                          "items": {
                            "properties": {
                              "address": { "type": "string" },
                              "port": { "type": "integer" }
                            }
                          }
                        },
                        "authentication": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "i.e. Enyim.Caching.Memcached.PlainTextAuthenticator"
                            },
                            "parameters": {
                              "type": "object",
                              "properties": {
                                "zone": { "type": "string" },
                                "userName": { "type": "string" },
                                "password": { "type": "string" }
                              }
                            }
                          }
                        }
                      }
                    },
                    "entryExpirationInMinutes": { "$ref": "#/definitions/entryExpirationInMinutes" }
                  }
                }
              }
            },
            "app.core.Extensions.Data.EF": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "ignore": {
                      "type": "array",
                      "description": "Excludes the given entity type from the model. This method is typically used to remove types from the model that were added by convention., i.e. `MyNamespace.MyClass, MyAssembly`",
                      "items": { "type": "string" }
                    },
                    "mappings": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Entity name, case sensitive",
                            "default": "typeof(T).Name"
                          },
                          "table": {
                            "type": "string",
                            "description": "Specify a table name",
                            "default": "typeof(T).Name"
                          },
                          "schema": {
                            "type": "string",
                            "description": "Specify a database schema",
                            "default": "dbo"
                          },
                          "IdColumnName": {
                            "type": "string",
                            "description": "Map Id property to column name",
                            "default": "Id"
                          },
                          "properties": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the property, case sensitive"
                                },
                                "column": {
                                  "type": "string",
                                  "description": "Name of the database column representing the property"
                                },
                                "ignore": {
                                  "type": "boolean",
                                  "default": false,
                                  "description": "Excludes the given property from the entity type"
                                }
                              },
                              "required": [ "name" ]
                            }

                          }
                        },
                        "required": [ "name" ]
                      }
                    }
                  }
                }
              }
            },
            "app.core.Extensions.Data.EF.MySql": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "$ref": "#/definitions/dbConnection"
                }
              }
            },
            "app.core.Extensions.Data.EF.SqlServer": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "$ref": "#/definitions/dbConnection"
                }
              }
            },
            "app.core.Extensions.Data.Mongo": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "$ref": "#/definitions/dbConnection"
                }
              }
            },
            "app.core.Extensions.Data.FileSystem": {
              "$ref": "#/definitions/assembly"
            },
            "app.core.Extensions.Identity": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "inMemory": {
                      "type": "object",
                      "description": "Use in-memory identities, resources, clients",
                      "properties": {
                        "enable": {
                          "type": "boolean",
                          "default": true
                        },
                        "identityResources": {
                          "type": "array",
                          "items": {
                            "allOf": [ { "$ref": "#/definitions/identityResource" } ]
                          }
                        },
                        "apiResources": {
                          "type": "array",
                          "items": {
                            "allOf": [ { "$ref": "#/definitions/identityResource" } ],
                            "properties": {
                              "apiSecrets": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/identitySecret"
                                },
                                "description": "The API secret is used for the introspection endpoint. The API can authenticate with introspection using the API name and secret"
                              },
                              "scopes": {
                                "type": "array",
                                "items": {
                                  "allOf": [ { "$ref": "#/definitions/identityResource" } ],
                                  "properties": {
                                    "showInDiscoveryDocument": {
                                      "type": "boolean",
                                      "default": true,
                                      "description": "Specifies whether this scope is shown in the discovery document"
                                    }
                                  },
                                  "description": "An API must have at least one scope. Each scope can have different settings"
                                }
                              }
                            }
                          }
                        },
                        "clients": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "default": true
                              },
                              "clientId": { "type": "string" },
                              "clientSecrets": {
                                "type": "array",
                                "items": { "$ref": "#/definitions/identitySecret" },
                                "description": "only relevant for flows that require a secret"
                              },
                              "allowedGrantTypes": {
                                "type": "array",
                                "items": { "enum": [ "AuthorizationCode", "ClientCredentials", "DeviceFlow", "Hybrid", "Implicit", "ResourceOwnerPassword" ] },
                                "uniqueItems": true
                              },
                              "allowedScopes": {
                                "type": "array",
                                "items": { "type": "string" },
                                "uniqueItems": true,
                                "description": " Specifies the api scopes that the client is allowed to request. If empty, the client can't access any scope"
                              }
                            }
                          }
                        },
                        "persistedGrants": {
                          "type": "boolean",
                          "description": "Adds in-memory store",
                          "default": false
                        },
                        "caching": {
                          "type": "boolean",
                          "description": "Adds in-memory caching",
                          "default": false
                        }
                      }
                    },
                    "developerSigningCredential": {
                      "type": "boolean",
                      "default": false,
                      "description": "Sets the temporary signing credential"
                    },
                    "jwtBearerClientAuthentication": {
                      "type": "boolean",
                      "default": false,
                      "description": "Adds support for client authentication using JWT bearer assertions"
                    },
                    "testUsers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "subjectId": { "type": "string" },
                          "username": { "type": "string" },
                          "password": { "type": "string" },
                          "isActive": {
                            "type": "boolean",
                            "default": true
                          },
                          "claims": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "i.e. Name, Email, Address"
                                },
                                "value": { "type": "string" },
                                "valueType": {
                                  "type": "string",
                                  "enum": [ "string", "boolean", "integer", "double", "date", "datetime", "json" ],
                                  "default": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "app.core.Extensions.Message": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "senders": {
                      "type": "array",
                      "items": { "$ref": "#/definitions/endpoint" }
                    },
                    "receivers": {
                      "type": "array",
                      "items": { "$ref": "#/definitions/endpoint" }
                    }
                  }
                }
              }
            },
            "app.core.Extensions.Spa": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "rootPath": {
                      "type": "string",
                      "description": "Path relative to the application root, of the directory in which the physical files are located. If the specified directory does not exist, then the SpaStaticFiles middleware will not serve any static files.",
                      "default": "Client/dist/browser"
                    },
                    "defaultPage": {
                      "type": "string",
                      "description": "Default page that hosts your SPA user interface",
                      "default": "/index.html"
                    },
                    "sourcePath": {
                      "type": "string",
                      "description": "Path, relative to the application working directory, of the directory that contains the SPA source files during development. The directory may not exist in published applications",
                      "default": "Client"
                    },
                    "startupTimeoutInSeconds": {
                      "type": "integer",
                      "description": "Maximum duration that a request will wait for the SPA to become ready to serve to the client",
                      "default": 90
                    },
                    "spaDevelopmentServer": {
                      "type": "string",
                      "description": "Use only in development! Forward incoming requests to a local development server,i.e. http://localhost:4200."
                    },
                    "cliServerScript": {
                      "type": "string",
                      "description": "Use only in development! The name of the script in your package.json file that launches the Angular CLI process, i.e. start. This handles requests by passing them through to an instance of the Angular CLI server; alternative to spaDevelopmentServer"
                    },
                    "prerendering": {
                      "type": "object",
                      "properties": {
                        "enable": {
                          "type": "boolean",
                          "default": true
                        },
                        "cacheResponse": {
                          "type": "object",
                          "description": "Cache prerendering output, injecting app ICache implementation",
                          "properties": {
                            "enable": {
                              "type": "boolean",
                              "default": true
                            },
                            "skipQueryStringPath": {
                              "type": "boolean",
                              "description": "If true, don't cache parameterized path",
                              "default": true
                            },
                            "skipFilePath": {
                              "type": "boolean",
                              "description": "If true, cache only extensionless path",
                              "default": true
                            },
                            "excludePaths": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "Array of path prefixes for which cache is disabled"
                            },
                            "includePaths": {
                              "type": "array",
                              "items": { "type": "string" },
                              "description": "Array of path prefixes for which cache is always enabled"
                            }
                          }
                        },
                        "bootModulePath": {
                          "type": "string",
                          "description": "Path, relative to your application root, of the JavaScript file containing prerendering logic",
                          "default": "Client/dist/server/main.js"
                        },
                        "bootModuleBuilderScript": {
                          "type": "string",
                          "description": "Use only in development! npm script that the prerenderer will invoke before looking for the boot module file, i.e. build:server "
                        },
                        "excludeUrls": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "\"Array of URL prefixes for which prerendering should not run, i.e. \"/sockjs-node\"\""
                        },
                        "contextData": {
                          "type": "array",
                          "items": {
                            "enum": [ "features", "items", "session", "user", "webSockets" ]
                          },
                          "description": "Pass additional context data to the prerendering entrypoint code",
                          "uniqueItems": true
                        }
                      }
                    }
                  }
                }
              }
            },
            "app.core.Extensions.StaticFiles": {
              "allOf": [
                { "$ref": "#/definitions/assembly" }
              ],
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "paths": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "headers": {
                            "type": "object",
                            "additionalProperties": { "type": "string" }
                          },
                          "path": { "type": "string" },
                          "isRelativePath": { "type": "boolean" },
                          "requestPath": { "type": "string" },
                          "defaultFiles": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "mimeTypes": {
                            "type": "object",
                            "patternProperties": { "^\\.[^.]+$": { "type": "string" } },
                            "additionalProperties": {
                              "type": "string",
                              "pattern": "^\\.[^.]+$"
                            }
                          },
                          "enableDirectoryBrowser": { "type": "boolean" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "additionalProperties": {
            "type": [
              "string",
              "object"
            ],
            "$ref": "#/definitions/assembly"
          }
        }
      }
    }
  }
}
